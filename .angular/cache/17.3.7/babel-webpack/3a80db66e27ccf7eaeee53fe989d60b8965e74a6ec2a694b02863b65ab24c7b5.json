{"ast":null,"code":"import { BrowserModule } from '@angular/platform-browser';\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { FormsModule } from '@angular/forms';\nimport { HttpClient, HttpClientModule } from '@angular/common/http';\n// Import ngx-translate modules\nimport { TranslateModule, TranslateLoader } from '@ngx-translate/core';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngx-translate/core\";\n// AoT requires an exported function for factories\nexport function HttpLoaderFactory(http) {\n  // To avoid the HttpClient type mismatch, ensure you import HttpClient from the same @angular/common/http package as used by ngx-translate.\n  // If you can't uninstall npm modules, try deleting both 'node_modules' folders in your project and in your user directory, then run 'npm install' only in your project directory.\n  // As a workaround, you can also try using a dynamic import:\n  const loader = new (require('@ngx-translate/http-loader').TranslateHttpLoader)(http, './assets/i18n/', '.json');\n  return loader;\n}\nexport let AppModule = /*#__PURE__*/(() => {\n  class AppModule {\n    static #_ = this.ɵfac = function AppModule_Factory(t) {\n      return new (t || AppModule)();\n    };\n    static #_2 = this.ɵmod = /*@__PURE__*/i0.ɵɵdefineNgModule({\n      type: AppModule,\n      bootstrap: [AppComponent]\n    });\n    static #_3 = this.ɵinj = /*@__PURE__*/i0.ɵɵdefineInjector({\n      imports: [BrowserModule, AppRoutingModule, FormsModule, HttpClientModule, TranslateModule.forRoot({\n        loader: {\n          provide: TranslateLoader,\n          useFactory: HttpLoaderFactory,\n          deps: [HttpClient]\n        }\n      })]\n    });\n  }\n  return AppModule;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}